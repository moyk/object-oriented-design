package hw.hw3;

import java.util.*;

public class CashRegister {
   private List<Customer> custs = new LinkedList<Customer>();
   private int numServed = 0;
   private int totalWaitTime = 0;
   private Customer currentCust = null;
   private Cashier cashier; // now keeps this data
   
   public CashRegister(Cashier cashier){ // constructor is needed for Cashier variable
	   this.cashier = cashier;
   }
   
   public String cashier(){ // just another convenient method
	   return cashier.toString();
   }
   
   public void addCustomer(int t, ItemDistribution id) { // now takes ItemDistribution as argument
	   Customer c = new Customer(t, id); // tells Customer class to pay attention to ItemDistribution
	   custs.add(c);
	   if (currentCust == null)
		   currentCust = c;
   }
   
   public void elapseOneSecond(int currentTime) {
	   if(cashier.elapseOneSecond(currentCust)){ // now tells Cashier subclasses to do the job of elapsing
		   numServed++;							 // will return true if Customer is finished
		   totalWaitTime += currentTime - currentCust.arrivalTime();
		   
		   // Remove the finished customer and make the next customer current.
		   custs.remove(0);
		   currentCust = custs.size() > 0 ? custs.get(0) : null;
	   }
   }
   
   public int size() { 
      return custs.size(); 
   }
   
   public int customersServed() { 
      return numServed; 
   }
   
   public int avgWaitTime() { 
	   if(numServed == 0){ // gotta avoid this mathematical atrocity
		   return 0;
	   }
      return totalWaitTime / numServed; 
   }
}
